import { useState, useEffect, useRef } from "react";
import ProfileIcon from "./ProfileIcon";
import TypingIndicator from "./TypingIndicator";
import "../styles/Chatbot.css";
import send from "../assets/Send.png";
import logo from "../assets/logobot.jpg";
import { getPost, postMessage } from "../api/PostApi";

// ✅ Format dynamic message from bot using <b> tags
const formatDynamicMessage = (html) => {
  if (!html || typeof html !== "string") return html;

  const lines = [];
  const pattern2 = /<b>(.*?)<\/b>:\s*(.*?)(?=<b>|$)/gs;
  let match2;
  while ((match2 = pattern2.exec(html)) !== null) {
    const key = match2[1].trim();
    const value = match2[2].trim().replace(/\n/g, "<br/>");
    lines.push(`<div><strong>${key}:</strong> ${value}</div>`);
  }

  return lines.length === 0 ? html : `<div class="formatted-card">${lines.join("")}</div>`;
};

const Chatbot = ({ setChatbotMinimized }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const [formDisabled, setFormDisabled] = useState(true); // Initially disabled
  const [specialOptionSelected, setSpecialOptionSelected] = useState(false); // Track if special option was selected
  const [formData, setFormData] = useState({
    subject: "",
    source: "",
    destination: "",
    zone: "",
    port: "",
    beforeCreationDate: "",
    beforeExpireDate: "",
  });

  const messagesEndRef = useRef(null);
  const timeoutRef = useRef(null);
  const API_TIMEOUT = 20000;

  const clearCurrentTimeout = () => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  };

  const setApiTimeout = (errorHandler) => {
    clearCurrentTimeout();
    timeoutRef.current = setTimeout(() => {
      setIsTyping(false);
      errorHandler();
    }, API_TIMEOUT);
  };

  const getCurrentTime = () => {
    const now = new Date();
    return `${now.getHours().toString().padStart(2, "0")}:${now.getMinutes().toString().padStart(2, "0")}`;
  };

  const getPostData = async () => {
    try {
      setIsTyping(true);
      setApiTimeout(() => {
        setMessages([
          {
            id: Date.now(),
            text: "Unable to load messages. Please try again later.",
            sender: "bot",
            time: getCurrentTime(),
          },
        ]);
      });

      const res = await getPost();
      clearCurrentTimeout();

      const formattedMessages = res.data.chat_history.map((item, index) => ({
        id: Date.now() + index,
        text: item.message || "",
        sender: item.sender.toLowerCase() === "you" ? "user" : "bot",
        time: getCurrentTime(),
        options: item.options || [],
      }));

      setMessages(formattedMessages);
      
      // Initially disable the form until user selects a special option
      setFormDisabled(true);
      setSpecialOptionSelected(false);
      
      setIsTyping(false);
    } catch {
      clearCurrentTimeout();
      setIsTyping(false);
      setMessages([
        {
          id: Date.now(),
          text: "An error occurred while loading messages.",
          sender: "bot",
          time: getCurrentTime(),
        },
      ]);
    }
  };

  useEffect(() => {
    getPostData();
    return () => clearCurrentTimeout();
  }, []);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // We don't need this effect anymore as we'll control form enabled/disabled state
  // directly in the handleOptionClick function and handleSendMessage

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (newMessage.trim() === "") return;

    const userMsg = {
      id: Date.now(),
      text: newMessage,
      sender: "user",
      time: getCurrentTime(),
    };

    setMessages((prev) => [...prev, userMsg]);
    setNewMessage("");
    setIsTyping(true);
    
    // Disable form immediately after sending a message
    setFormDisabled(true);
    setSpecialOptionSelected(false);

    try {
      setApiTimeout(() => {
        const errorMsg = {
          id: Date.now(),
          text: "Server timeout. Try again later.",
          sender: "bot",
          time: getCurrentTime(),
        };
        setMessages((prev) => [...prev, errorMsg]);
      });

      const res = await postMessage(newMessage);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
      }
    } catch {
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "An error occurred. Please try again.",
        sender: "bot",
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  // Modified function to handle specific option buttons properly
  const handleOptionClick = async (optionText) => {
    // Special case for the multi-field form
    if (optionText.toLowerCase().includes("have multiple fields")) {
      setShowForm(true);
      return;
    }

    // Clean the option text (remove numbering/prefixes)
    const cleanedOpt = optionText.replace(/^\d+\.|[a-zA-Z]\.\s*/, "").trim();
    
    // Define the special options that should enable the input form
    const specialOptions = ["Team Info", "Transaction Info", "Cache value", "Enter far id", "Other"];
    const isSpecialOption = specialOptions.includes(cleanedOpt);
    
    // Add user message to chat
    const userMessage = {
      id: Date.now(),
      text: cleanedOpt,
      sender: "user",
      time: getCurrentTime(),
    };
    setMessages((prev) => [...prev, userMessage]);
    
    // Enable form ONLY if the user selected one of the special options
    if (isSpecialOption) {
      setSpecialOptionSelected(true);
    }
    
    // Process the selected option
    setIsTyping(true);
    
    try {
      setApiTimeout(() => {
        const errorMsg = {
          id: Date.now(),
          text: "Server timeout. Try again later.",
          sender: "bot",
          time: getCurrentTime(),
        };
        setMessages((prev) => [...prev, errorMsg]);
      });

      // Send the option selection to the API
      const res = await postMessage(cleanedOpt);
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
        
        // After receiving response, enable form ONLY if we previously selected a special option
        setFormDisabled(!isSpecialOption);
      }
    } catch {
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "An error occurred.",
        sender: "bot",
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleFormSubmit = async (e) => {
    e.preventDefault();
    setShowForm(false);
    setIsTyping(true);

    try {
      setApiTimeout(() => {
        setMessages((prev) => [
          ...prev,
          {
            id: Date.now(),
            text: "Server timeout. Try again later.",
            sender: "bot",
            time: getCurrentTime(),
          },
        ]);
      });

      const res = await postMessage(formData); // ⚠️ make sure backend accepts this format
      clearCurrentTimeout();

      const latest = res.data.chat_history?.slice(-1)[0];
      if (latest) {
        const botResponse = {
          id: Date.now(),
          text: latest.message || "",
          sender: "bot",
          time: getCurrentTime(),
          options: latest.options || [],
        };
        setMessages((prev) => [...prev, botResponse]);
      }
    } catch {
      clearCurrentTimeout();
      const errorMsg = {
        id: Date.now(),
        text: "Something went wrong. Try again.",
        sender: "bot",
        time: getCurrentTime(),
      };
      setMessages((prev) => [...prev, errorMsg]);
    }

    setIsTyping(false);
  };

  const handleMinimize = () => {
    setIsMinimized(true);
    setChatbotMinimized(true);
  };

  const handleRestore = () => {
    setIsMinimized(false);
    setChatbotMinimized(false);
  };

  return (
    <div className={`chat-container ${isMinimized ? "minimized" : ""}`}>
      <div className="chat-header">
        <img src={logo} alt="Logo" className="chat-logo" onClick={handleRestore} />
        {!isMinimized && (
          <>
            <div className="chat-title">
              <h1>EIS GINI</h1>
              <h5>(Generative Interactive Neural Interface)</h5>
            </div>
            <button className="minimize-button" onClick={handleMinimize}>
              &#x2212;
            </button>
          </>
        )}
      </div>

      {!isMinimized && (
        <>
          <div className="messages-container">
            {messages.map((item, index) => (
              <div
                key={index}
                className={`message-wrapper ${item.sender.toLowerCase()}`}
                style={{
                  display: "flex",
                  flexDirection: "column",
                  alignItems: item.sender === "user" ? "flex-end" : "flex-start",
                  marginBottom: "12px",
                }}
              >
                <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                  {item.sender === "bot" && <ProfileIcon sender={item.sender} />}
                  <div className={`message ${item.sender === "user" ? "user-message" : "bot-message"}`}>
                    {item.sender === "bot" && item.text.includes("<b>") ? (
                      <div className="message-content" dangerouslySetInnerHTML={{ __html: formatDynamicMessage(item.text) }} />
                    ) : (
                      <div className="message-content">{item.text}</div>
                    )}
                    {item.options?.length > 0 && (
                      <div className="options-list">
                        {item.options.map((opt, i) => (
                          <button key={i} className="option-button" onClick={() => handleOptionClick(opt)}>
                            {opt}
                          </button>
                        ))}
                      </div>
                    )}
                    <div className="message-time">{item.time}</div>
                  </div>
                  {item.sender === "user" && <ProfileIcon sender={item.sender} />}
                </div>
              </div>
            ))}

            {isTyping && (
              <div style={{ display: "flex", alignItems: "flex-end", gap: "5px" }}>
                <ProfileIcon sender="bot" />
                <div className="message bot-message">
                  <TypingIndicator />
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {showForm && (
            <form className="multi-field-form" onSubmit={handleFormSubmit}>
              <div className="form-grid">
                <input type="text" placeholder="Subject" value={formData.subject} onChange={(e) => setFormData({ ...formData, subject: e.target.value })} />
                <input type="text" placeholder="Source" value={formData.source} onChange={(e) => setFormData({ ...formData, source: e.target.value })} />
                <input type="text" placeholder="Destination" value={formData.destination} onChange={(e) => setFormData({ ...formData, destination: e.target.value })} />
                <input type="text" placeholder="Zone" value={formData.zone} onChange={(e) => setFormData({ ...formData, zone: e.target.value })} />
                <input type="text" placeholder="Port" value={formData.port} onChange={(e) => setFormData({ ...formData, port: e.target.value })} />
                <input type="date" placeholder="Before Creation Date" value={formData.beforeCreationDate} onChange={(e) => setFormData({ ...formData, beforeCreationDate: e.target.value })} />
                <input type="date" placeholder="Before Expire Date" value={formData.beforeExpireDate} onChange={(e) => setFormData({ ...formData, beforeExpireDate: e.target.value })} />
              </div>
              <button type="submit" className="search-button">Search</button>
            </form>
          )}

          <form className="message-form" onSubmit={handleSendMessage}>
            <input 
              type="text" 
              value={newMessage} 
              onChange={(e) => setNewMessage(e.target.value)} 
              placeholder={formDisabled ? "Select one of the special options first..." : "Type a message..."} 
              className="message-input" 
              disabled={formDisabled}
            />
            <button type="submit" className="send-button" disabled={formDisabled}>
              <img className="logo" src={send} alt="Send" style={{ height: "20px", opacity: formDisabled ? 0.5 : 1 }} />
            </button>
          </form>
        </>
      )}
    </div>
  );
};

export default Chatbot;
