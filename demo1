import React, { useState, useEffect } from 'react';
import Header from './components/Header.jsx';
import Footer from './components/Footer';
import Sidebar from './components/Menu'; // Updated import
import Dashboard from './components/Dashboard';
import Chatbot from './components/ChatBot';
import Login from './components/Login';
import './App.css';

function App() {
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
  const [chatbotMinimized, setChatbotMinimized] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [username, setUsername] = useState('');

  // Token Utilities
  const generateAccessToken = (username) => {
    return btoa(JSON.stringify({
      user: username,
      expires: Date.now() + 3600000 // 1 hour
    }));
  };

  const validateToken = () => {
    const token = localStorage.getItem('access_token');
    if (!token) return false;
    
    try {
      const data = JSON.parse(atob(token));
      return data.expires > Date.now();
    } catch {
      return false;
    }
  };

  // Auth Functions
  const handleLogin = (user) => {
    const now = Date.now();
    setUsername(user);
    setIsLoggedIn(true);
    localStorage.setItem('access_token', generateAccessToken(user));
    localStorage.setItem('username', user);
    localStorage.setItem('loginTime', now.toString());
  };

  const handleLogout = () => {
    setIsLoggedIn(false);
    setUsername('');
    localStorage.removeItem('access_token');
    localStorage.removeItem('username');
    localStorage.removeItem('loginTime');
    sessionStorage.clear();
  };

  // Auto-logout
  useEffect(() => {
    if (!isLoggedIn) return;

    const checkAuth = () => {
      if (!validateToken()) handleLogout();
    };

    const interval = setInterval(checkAuth, 300000); // Check every 5 minutes
    return () => clearInterval(interval);
  }, [isLoggedIn]);

  // Secure Link Generator
  const getCardLinks = (isLoggedIn, navigateToLogin) => {
    const baseLinks = [
      { name: 'Daily Checklist', url: 'https://10.191.171.12:5443/EIS/Checklist/', icon: '../src/assets/accountability.png' },
      // ... ALL your existing links
      { name: 'Ansible', url: 'https://10.191.171.12:9443/#/login', icon: '../src/assets/accountability.png' },
    ];

    return baseLinks.map(link => ({
      ...link,
      onClick: (e) => {
        if (!validateToken()) {
          e.preventDefault();
          alert('Session expired. Please login again.');
          navigateToLogin();
        }
      }
    }));
  };

  if (!isLoggedIn) {
    return <Login onLogin={handleLogin} />;
  }

  return (
    <div>
      <Header
        darkMode={darkMode}
        setDarkMode={setDarkMode}
        username={username}
        onLogout={handleLogout}
      />
      {!chatbotMinimized && <div className="app-background" />}
      <div className={`main ${isSidebarOpen ? "sidebar-open" : "sidebar-collapsed"}`}>
        <Sidebar
          darkMode={darkMode}
          isSidebarOpen={isSidebarOpen}
          setIsSidebarOpen={setIsSidebarOpen}
          isLoggedIn={isLoggedIn}
          navigateToLogin={handleLogout}
        />
        <Dashboard isSidebarOpen={isSidebarOpen} />
        <Chatbot setChatbotMinimized={setChatbotMinimized} username={username} />
      </div>
      <Footer />
    </div>
  );
}

export default App;
export { getCardLinks }; // Export for Sidebar usage
