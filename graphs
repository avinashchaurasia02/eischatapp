import '../styles/GraphCarousel.css';

import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,
  PieChart, Pie, Cell, Legend
} from 'recharts';

import Download from '../assets/down-arrow.png';
import {
  getServiceWiseExp5,
  getServiceWiseSys5,
  getIpWiseExp5,
  getIpWiseSys5,
  getPortWiseExp5,
  getPortWiseSys5,
  postPortWiseExp5,
  postPortWiseSys5,
  postIpWiseSys5,
  postIpWiseExp5,
  postServiceWiseExp5,
  postServiceWiseSys5,
  getFARExpires
} from "../api/PostApi";

import { useState, useEffect, useRef } from "react";

// Format large numbers
const formatHits = (value) => {
  if (value >= 10000000) return (value / 10000000).toFixed(2) + ' Cr';
  if (value >= 100000) return (value / 100000).toFixed(2) + ' L';
  if (value >= 1000) return (value / 1000).toFixed(2) + ' K';
  return value;
};

// Format percentage for the pie chart
const formatPercent = (value) => `${(value * 100).toFixed(1)}%`;

const ThreeDBar = (props) => {
  const { x, y, width, height, fill } = props;
  const depth = 6;

  return (
    <g>
      <rect x={x} y={y} width={width} height={height} fill={fill} style={{ transition: "all 0.3s ease" }} className="custom-bar" />
      <polygon points={`${x},${y} ${x + depth},${y - depth} ${x + width + depth},${y - depth} ${x + width},${y}`} fill="#ffffff33" />
      <polygon points={`${x + width},${y} ${x + width + depth},${y - depth} ${x + width + depth},${y + height - depth} ${x + width},${y + height}`} fill="#00000033" />
    </g>
  );
};

const GraphCarousel = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [paused, setPaused] = useState(false);
  const [charts, setCharts] = useState([]);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [calendarOpen, setCalendarOpen] = useState(false);
  const [selectedDate, setSelectedDate] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  const [selectedTimeLabel, setSelectedTimeLabel] = useState("5min");
  const [selectedTimeValue, setSelectedTimeValue] = useState("5min");
  const [currentDisplayTitle, setCurrentDisplayTitle] = useState("");
  const [farData, setFarData] = useState([]);
  const [farTotal, setFarTotal] = useState(0);

  const calendarRef = useRef(null);
  const intervalRef = useRef(null);
  
  // Colors for the pie chart
  const COLORS = [
    '#FF5733', '#33FF57', '#3357FF', '#F3FF33', '#FF33F3', 
    '#33FFF3', '#BD33FF', '#FF8C33', '#33FFBD', '#8C33FF',
    '#33FF8C', '#FF33BD', '#338CFF'
  ];

  const timeOptions = [
    { label: "5 min", value: "5min" },
    { label: "15 min", value: "15min" },
    { label: "30 min", value: "30min" },
    { label: "1 hour", value: "1hour" },
    { label: "Till now", value: "tillnow" },
    { label: "Yesterday", value: "yesterday" },
    { label: "Custom date", value: "custom" },
  ];

  const baseTitles = [
    'Service-wise Exp Data',
    'Service-wise Sys Data',
    'IP-wise Exp Data',
    'IP-wise Sys Data',
    'Port-wise Exp Data',
    'Port-wise Sys Data',
    'Monthly FAR Expiry Distribution' // Added new title for FAR pie chart
  ];

  const formatDate = (date) =>
    date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });

  // Fetch FAR data
  const fetchFARData = async () => {
    try {
      // Mock data for now (in a real scenario you'd use the API)
      // This simulates the data structure you provided
      const response = await getFARExpires();


      // In a real implementation, you'd use:
      // const response = await getFARExpires();
      
      const formattedData = [];
      let total = 0;
      
      response.data.MonthlyFarCount.forEach(monthData => {
        const [month, value] = Object.entries(monthData)[0];
        if (value > 0) {  // Only include non-zero values
          formattedData.push({
            name: month,
            value: value
          });
          total += value;
        }
      });
      
      setFarData(formattedData);
      setFarTotal(total);
      
      return formattedData;
    } catch (error) {
      console.error("Error fetching FAR data:", error);
      return [];
    }
  };

  const updateChartTitles = (timeDisplay) => {
    if (charts.length === 0) return;

    const updatedCharts = charts.map((chart, index) => ({
      ...chart,
      title: index === 6 ? baseTitles[6] : `${baseTitles[index]} of ${timeDisplay}`
    }));

    setCharts(updatedCharts);

    if (currentIndex >= 0 && currentIndex < charts.length) {
      if (currentIndex === 6) { // For the FAR chart
        setCurrentDisplayTitle(baseTitles[6]);
      } else {
        setCurrentDisplayTitle(`${baseTitles[currentIndex]} of ${timeDisplay}`);
      }
    }
  };

  const fetchFilteredData = async (timeRange, timeLabel) => {
    setIsLoading(true);

    try {
      console.log(`Fetching data for time range: ${timeRange}`);

      const [
        serviceExp,
        serviceSys,
        ipExp,
        ipSys,
        portExp,
        portSys
      ] = await Promise.all([
        postServiceWiseExp5(timeRange),
        postServiceWiseSys5(timeRange),
        postIpWiseExp5(timeRange),
        postIpWiseSys5(timeRange),
        postPortWiseExp5(timeRange),
        postPortWiseSys5(timeRange)
      ]);

      // Fetch FAR data
      const farChartData = await fetchFARData();

      const formatData = (data, key) => {
        if (!data || !Array.isArray(data)) {
          console.error('Invalid data format received:', data);
          return [];
        }

        return data.map(item => ({
          ...item,
          [key]: item[key]?.toString().trim() || '',
          Hits: Number(item.Hits || 0),
          logVal: Number(item.logVal || 0)
        }));
      };

      // Use the provided timeLabel for display, or generate one for custom dates
      const timeDisplay = timeRange?.startsWith('custom_') && selectedDate
        ? `Custom: ${formatDate(selectedDate)}`
        : timeLabel || selectedTimeLabel;

      const chartData = [
        {
          data: formatData(serviceExp?.data?.service_wise_top5 || [], 'Service_name'),
          dataKeyX: 'Service_name',
          baseTitle: baseTitles[0]
        },
        {
          data: formatData(serviceSys?.data?.service_wise_top5 || [], 'Service_name'),
          dataKeyX: 'Service_name',
          baseTitle: baseTitles[1]
        },
        {
          data: formatData(ipExp?.data?.Ip_wise_top5 || [], 'Ip'),
          dataKeyX: 'Ip',
          baseTitle: baseTitles[2]
        },
        {
          data: formatData(ipSys?.data?.Ip_wise_top5 || [], 'Ip'),
          dataKeyX: 'Ip',
          baseTitle: baseTitles[3]
        },
        {
          data: formatData(portExp?.data?.port_wise_top5 || [], 'Port'),
          dataKeyX: 'Port',
          baseTitle: baseTitles[4]
        },
        {
          data: formatData(portSys?.data?.port_wise_top5 || [], 'Port'),
          dataKeyX: 'Port',
          baseTitle: baseTitles[5]
        },
        {
          data: farChartData,
          dataKeyX: 'name',
          baseTitle: baseTitles[6]
        }
      ];

      return chartData.map(({ data, dataKeyX, baseTitle }) => {
        // Create different chart components based on chart type
        let chartComponent;
        
        if (baseTitle === baseTitles[6]) {
          // Pie chart for FAR data
          chartComponent = (
            <ResponsiveContainer>
              <PieChart margin={{ top: 30, right: 30, left: 30, bottom: 30 }}>
                <Pie
                  data={data}
                  cx="50%"
                  cy="50%"
                  labelLine
                  outerRadius={130}
                  innerRadius={60}
                  fill="#8884d8"
                  dataKey="value"
                  nameKey="name"
                  label={({ name, percent }) => `${name}: ${formatPercent(percent)}`}
                >
                  {data.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                  ))}
                </Pie>
				
                 <Tooltip
                  formatter={(value) => [`${value} (${((value / farTotal) * 100).toFixed(1)}%)`, 'Count']}
                  contentStyle={{ backgroundColor: '#2e1a3b', borderColor: '#f285c1', color: '#fff', borderRadius: '8px' }}
                  itemStyle={{ color: '#fff' }}
                  labelStyle={{ color: '#f285c1' }}
                />
                <Legend layout="horizontal" verticalAlign="bottom" align="center" />
              </PieChart>
            </ResponsiveContainer>
          );
        } else {
          // Bar chart for other data
          chartComponent = (
            <ResponsiveContainer>
              <BarChart
                data={data}
                margin={{ top: 30, right: 30, left: 30, bottom: 60 }}
                barCategoryGap={10}
                key={`${baseTitle}-${timeRange}-chart`}
              >
                <defs>
                  <linearGradient id="barGradient" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor="#f285c1" />
                    <stop offset="100%" stopColor="#8e2b90" />
                  </linearGradient>
                </defs>
                <CartesianGrid strokeDasharray="3 3" stroke="#ffffff33" />
                <XAxis
                  dataKey={dataKeyX}
                  stroke="#f7f7f7"
                  interval={0}
                  angle={-30}
                  textAnchor="end"
                  height={60}
                  tick={{ fontSize: 10, fill: '#f7f7f7' }}
                />
                <YAxis
                  tick={{ fill: '#f7f7f7' }}
                  axisLine
                  showLine
                  tickFormatter={formatHits}
                  domain={[0, (dataMax) => Math.ceil(dataMax * 1.1)]}
                />
                <Tooltip
                  contentStyle={{ backgroundColor: '#2e1a3b', borderColor: '#f285c1', color: '#fff', borderRadius: '8px' }}
                  itemStyle={{ color: '#fff' }}
                  labelStyle={{ color: '#f285c1' }}
                  formatter={(value, name, props) => {
                    if (name === 'Hits') {
                      const formattedHits = formatHits(props.payload.Hits);
                      return [`${formattedHits} (${props.payload.Hits})`, 'Hits'];
                    }
                    return value;
                  }}
                  labelFormatter={(label) => `${dataKeyX}: ${label}`}
                />
                <Bar
                  dataKey="Hits"
                  fill="url(#barGradient)"
                  shape={ThreeDBar}
                  barSize={50}
                  key={`${baseTitle}-${timeRange}-bar`}
                />
              </BarChart>
            </ResponsiveContainer>
          );
        }
        
        return {
          baseTitle,
          title: baseTitle === baseTitles[6] 
            ? baseTitle 
            : `${baseTitle} of ${timeDisplay}`,
          rawData: data,
          chart: chartComponent
        };
      });
    } catch (error) {
      console.error("Error fetching data:", error);
      return [];
    } finally {
      setIsLoading(false);
    }
  };

  // Initial data fetch
  useEffect(() => {
    fetchFilteredData(selectedTimeValue, selectedTimeLabel).then(chartData => {
      if (chartData && chartData.length > 0) {
        setCharts(chartData);
        setCurrentDisplayTitle(chartData[0].title);
      } else {
        console.error("No chart data returned from initial fetch");
      }
    });

    // Cleanup function
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, []);

  // Update display title when currentIndex changes
  useEffect(() => {
    if (charts.length > 0 && currentIndex >= 0 && currentIndex < charts.length) {
      setCurrentDisplayTitle(charts[currentIndex].title);
    }
  }, [currentIndex, charts]);

  // Set up carousel auto-rotation
  useEffect(() => {
    // Clear any existing interval
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }

    // Only create new interval if not paused and we have charts
    if (!paused && charts.length > 0) {
      intervalRef.current = setInterval(() => {
        setCurrentIndex(prev => (prev === charts.length - 1 ? 0 : prev + 1));
      }, 5000);
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [paused, charts.length]);

  // Sync chart titles with dropdown label
  useEffect(() => {
    if (charts.length > 0) {
      updateChartTitles(selectedTimeLabel);
    }
  }, [selectedTimeLabel, charts.length]);

  const handleTimeChange = async (option) => {
    // Skip time change for FAR chart
    if (currentIndex === 6) return;

    // Handle custom date selection
    if (option.value === "custom") {
      setDropdownOpen(false);
      setCalendarOpen(true);
      return;
    }

    console.log(`Time option selected: ${option.label} (${option.value})`);

    // Update state
    setSelectedTimeLabel(option.label);
    setSelectedTimeValue(option.value);
    setDropdownOpen(false);
    setCalendarOpen(false);

    // Pause carousel during loading and show loading state
    setPaused(true);
    setIsLoading(true);

    try {
      // Update title to show loading state for current chart
      if (currentIndex >= 0 && currentIndex < baseTitles.length) {
        setCurrentDisplayTitle(`${baseTitles[currentIndex]} of ${option.label}`);
      }

      // Fetch updated data
      const updatedCharts = await fetchFilteredData(option.value, option.label);

      if (updatedCharts && updatedCharts.length > 0) {
        setCharts(updatedCharts);
        setCurrentIndex(0); // Reset to first chart
        setCurrentDisplayTitle(updatedCharts[0].title);
      } else {
        console.error("No chart data returned from time change fetch");
      }
    } catch (error) {
      console.error("Error in handleTimeChange:", error);
    } finally {
      setIsLoading(false);
      setPaused(false); // Resume carousel
    }
  };

  const handleDateSelect = async (date) => {
    // Skip date select for FAR chart
    if (currentIndex === 6) return;

    if (!date) return;

    const formattedDate = formatDate(date);
    const dateValue = `custom_${date.toISOString().split('T')[0]}`;
    const timeLabel = `Custom: ${formattedDate}`;

    // Update state
    setSelectedDate(date);
    setSelectedTimeLabel(timeLabel);
    setSelectedTimeValue(dateValue);
    setCalendarOpen(false);

    // Pause carousel during loading and show loading state
    setPaused(true);
    setIsLoading(true);

    try {
      // Update title to show loading state for current chart
      if (currentIndex >= 0 && currentIndex < baseTitles.length) {
        setCurrentDisplayTitle(`${baseTitles[currentIndex]} of ${timeLabel}`);
      }

      // Fetch updated data
      const updatedCharts = await fetchFilteredData(dateValue, timeLabel);

      if (updatedCharts && updatedCharts.length > 0) {
        setCharts(updatedCharts);
        setCurrentIndex(0); // Reset to first chart
        setCurrentDisplayTitle(updatedCharts[0].title);
      } else {
        console.error("No chart data returned from date select fetch");
      }
    } catch (error) {
      console.error("Error in handleDateSelect:", error);
    } finally {
      setIsLoading(false);
      setPaused(false); // Resume carousel
    }
  };

  const generateCalendarDays = () => {
    const today = new Date();
    const days = [];
    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

    weekdays.forEach(day => days.push(<div key={`weekday-${day}`} className="calendar-weekday">{day}</div>));

    const sevenDaysAgo = new Date(today);
    sevenDaysAgo.setDate(today.getDate() - 6);

    const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
    const startDate = new Date(Math.max(sevenDaysAgo.getTime(), firstDayOfMonth.getTime()));
    const firstDayOfWeek = startDate.getDay();

    // Add empty cells for days before the start date
    for (let i = 0; i < firstDayOfWeek; i++) {
      days.push(<div key={`empty-start-${i}`} className="calendar-day"></div>);
    }

    const lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate();

    // Add calendar days
    for (let day = startDate.getDate(); day <= lastDayOfMonth; day++) {
      const date = new Date(today.getFullYear(), today.getMonth(), day);
      const isDisabled = date > today || date < sevenDaysAgo;
      const isSelected = selectedDate && date.toDateString() === selectedDate.toDateString();

      days.push(
        <div
          key={`day-${day}`}
          className={`calendar-day ${isDisabled ? 'disabled' : ''} ${isSelected ? 'selected' : ''}`}
          onClick={() => !isDisabled && handleDateSelect(date)}
        >
          {day}
        </div>
      );
    }

    return days;
  };

  const downloadCSV = (data, filename = 'chart-data.csv') => {
    if (!data || !data.length) {
      console.warn("No data available to download");
      return;
    }

    const keys = Object.keys(data[0]);
    const csvContent = [
      keys.join(','),
      ...data.map(row => keys.map(key => `"${row[key] || ''}"`).join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', filename);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url); // Clean up
  };

  const goToSlide = (index) => {
    if (index < 0 || index >= charts.length) return;

    setCurrentIndex(index);

    if (charts.length > 0 && index >= 0 && index < charts.length) {
      setCurrentDisplayTitle(charts[index].title);
    }
  };

  const toggleDropdown = () => {
    setDropdownOpen(!dropdownOpen);
    setCalendarOpen(false);
  };

  // Close dropdowns when clicking outside
  useEffect(() => {
    if (!dropdownOpen && !calendarOpen) return;

    const handleClickOutside = (event) => {
      if (!event.target.closest('.dropdown') && !event.target.closest('.calendar-container')) {
        setDropdownOpen(false);
        setCalendarOpen(false);
      }
    };

    document.addEventListener('click', handleClickOutside);
    return () => document.removeEventListener('click', handleClickOutside);
  }, [dropdownOpen, calendarOpen]);

  if (!charts.length) return (
    <div className="loading-container">
      <div className="loading-spinner"></div>
      <div>Loading charts...</div>
    </div>
  );

  return (
    <div className="carousel-container">
      <div className="carousel-header">
        {currentIndex !== 6 && (
          <div className="timeline-selector">
            <div className="dropdown" onClick={(e) => e.stopPropagation()}>
              <button 
                className="dropdown-toggle" 
                onClick={toggleDropdown}
              >
                   {selectedTimeLabel} 
              </button>
              <ul className={`dropdown-menu ${dropdownOpen ? 'show' : ''}`}>
                {timeOptions.map(option => (
                  <li
                    key={option.value}
                    onClick={() => handleTimeChange(option)}
                    className={option.value === selectedTimeValue ? 'selected' : ''}
                  >
                    {option.label}
                  </li>
                ))}
              </ul>
              {calendarOpen && (
                <div className="calendar-container" ref={calendarRef}>
                  <div className="calendar-header">
                    {new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
                  </div>
                  <div className="calendar">{generateCalendarDays()}</div>
                </div>
              )}
            </div>
          </div>
        )}

        <h2>{isLoading ? `Loading ${charts[currentIndex]?.baseTitle || ''}...` : currentDisplayTitle}</h2>

        <div className="download-button-wrapper">
          <button
            className="download-button"
            onClick={() => downloadCSV(charts[currentIndex]?.rawData, `${currentDisplayTitle}.csv`)}
            disabled={isLoading || !charts[currentIndex]?.rawData}
          >
            <div className="logo-wrapper">
              <img
                className="logo"
                src={Download}
                alt="Download Icon"
                style={{ height: '36px', marginRight: '3px' }}
              />
            </div>
          </button>
        </div>
      </div>

      <div
        className="carousel-graph"
        onMouseEnter={() => setPaused(true)}
        onMouseLeave={() => setPaused(false)}
      >
        {isLoading ? (
          <div className="loading-overlay">
            <div className="loading-spinner"></div>
            <div>Loading data...</div>
          </div>
        ) : (
          charts.map((item, index) => (
            <div
              key={`chart-container-${index}-${selectedTimeValue}`}
              className={`chart-fade ${index === currentIndex ? 'active' : ''}`}
              style={{ display: index === currentIndex ? 'block' : 'none' }}
            >
              {item.chart}
            </div>
          ))
        )}
      </div>

      <div className="carousel-dots">
        {charts.map((_, index) => (
          <span
            key={`dot-${index}`}
            className={`dot ${index === currentIndex ? 'active' : ''} ${paused ? 'paused' : ''}`}
            onClick={() => goToSlide(index)}
          />
        ))}
      </div>
    </div>
  );
};

export default GraphCarousel;
